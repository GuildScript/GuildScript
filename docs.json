{"meta":{"generator":"0.9.0","format":20,"date":1618930273615},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# GuildScript\nA discord.js-like client for Guilded.\n\n**WARNING:** GuildScript is in an early beta right now and as such features might be missing, incomplete, not documented and/or changed.\n\nGuilded's api is also not public so things might break unexpectedly.\n\n## Installation\n\nto install GuildScript run \n```bash\nyarn add guildscript\n# or\nnpm install guildscript\n```\n## Usage\n**Note:** Usage might change as this is in early development.\n```js\nconst Guilded = require('guildscript');\nconst client = new Guilded.Client();\n\nclient.on('ready' () => {\n    console.log(`Logged in as ${client.user.name}.`);\n});\n\nclient.on('message' () => {\n    let content = message.content.toString();\n    if(content === '!ping') message.channel.send('pong!');\n});\n\nclient.login('email', 'username');\n```\n","path":"docs/general/welcome.md"}}}},"classes":[{"name":"BaseManager","description":"The base of managers.","access":"private","props":[{"name":"cache","description":"The cache of data.","type":[[["Collection"]]],"meta":{"line":18,"file":"BaseManager.js","path":"src/managers"}}],"meta":{"line":11,"file":"BaseManager.js","path":"src/managers"}},{"name":"ChannelManager","description":"Manages the caching and fetching of channels.","extends":[[["BaseManager"]]],"props":[{"name":"cache","description":"The cache of data.","type":[[["Collection"]]],"meta":{"line":18,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"fetch","description":"Fetch a channel from the api.","params":[{"name":"channelID","description":"Required. The id of the channel to fetch.","type":[[["string"]]]},{"name":"options","description":"The options for the fetch.","optional":true,"type":[[["object"]]]},{"name":"options.parentID","description":"The parent id. If the type is \"thread\" then this is the message id. Otherwise this is the guild id. If none is specified then it will get dm channels.","optional":true,"type":[[["string"]]]},{"name":"options.type","description":"If it is \"thread\" then it will fetch a thread, otherwise it will fetch a channel.","optional":true,"type":[[["thread","'"]]]},{"name":"options.cache","description":"If this is set to false the channel will not be cached.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.force","description":"If this is false it will fetch it even if it's cached.","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<("],["TextBasedChannel","|"],["ThreadChannel","|"],["TextChannel",")>"]]],"meta":{"line":21,"file":"ChannelManager.js","path":"src/managers"}}],"meta":{"line":10,"file":"ChannelManager.js","path":"src/managers"}},{"name":"TeamManager","description":"Manages Teams.","extends":[[["BaseManager"]]],"props":[{"name":"cache","description":"The cache of data.","type":[[["Collection"]]],"meta":{"line":18,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"join","description":"Joins a team","params":[{"name":"id","description":"invite id","type":[[["String"]]]}],"async":true,"meta":{"line":16,"file":"TeamManager.js","path":"src/managers"}},{"name":"fetch","description":"Fetch a team from the api.","params":[{"name":"id","description":"Required. The id of the team to fetch.","type":[[["string"]]]},{"name":"options","description":"The options for the fetch.","optional":true,"type":[[["object"]]]},{"name":"options.cache","description":"If this is set to false the team will not be cached.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.force","description":"If this is false it will fetch it even if it's cached.","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["Team",">"]]],"meta":{"line":33,"file":"TeamManager.js","path":"src/managers"}}],"meta":{"line":8,"file":"TeamManager.js","path":"src/managers"}},{"name":"UserManager","description":"Manages users.","extends":[[["BaseManager"]]],"props":[{"name":"cache","description":"The cache of data.","type":[[["Collection"]]],"meta":{"line":18,"file":"BaseManager.js","path":"src/managers"}}],"methods":[{"name":"fetch","description":"Fetch a user from the api.","params":[{"name":"id","description":"Required. The id of the user to fetch.","type":[[["string"]]]},{"name":"options","description":"The options for the fetch.","optional":true,"type":[[["object"]]]},{"name":"options.cache","description":"If this is set to false the user will not be cached.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.force","description":"If this is false it will fetch it even if it's cached.","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":21,"file":"UserManager.js","path":"src/managers"}}],"meta":{"line":8,"file":"UserManager.js","path":"src/managers"}},{"name":"wsManager","description":"Manages ws events.","access":"private","meta":{"line":8,"file":"wsManager.js","path":"src/managers"}},{"name":"BaseComponent","description":"Represents a component in a message.","access":"private","meta":{"line":6,"file":"BaseComponent.js","path":"src/messageComponents"}},{"name":"ChannelMention","description":"Represents the a channel in a message.","extends":[[["ParagraphComponent"]]],"construct":{"name":"ChannelMention","description":"Represents the a channel in a message."},"methods":[{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":24,"file":"ChannelMention.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":33,"file":"ChannelMention.js","path":"src/messageComponents"}}],"meta":{"line":6,"file":"ChannelMention.js","path":"src/messageComponents"}},{"name":"CodeBlock","extends":[[["BaseComponent"]]],"construct":{"name":"CodeBlock","description":"Represents a codeblock in a message.","params":[{"name":"code","description":"The code in the codeblock.","type":[[["string"]]]},{"name":"lang","description":"The language of the codeblock.","default":"unformatted","type":[[["string"]]]}]},"methods":[{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":24,"file":"CodeBlock.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":33,"file":"CodeBlock.js","path":"src/messageComponents"}}],"meta":{"line":5,"file":"CodeBlock.js","path":"src/messageComponents"}},{"name":"Embed","extends":[[["BaseComponent"]]],"construct":{"name":"Embed","description":"Represents an embed in a message."},"props":[{"name":"title","description":"The title of the embed.","nullable":true,"type":[[["string"]]],"meta":{"line":17,"file":"Embed.js","path":"src/messageComponents"}},{"name":"description","description":"The description of the embed.","nullable":true,"type":[[["string"]]],"meta":{"line":22,"file":"Embed.js","path":"src/messageComponents"}},{"name":"url","description":"The url of the embed.","nullable":true,"type":[[["string"]]],"meta":{"line":27,"file":"Embed.js","path":"src/messageComponents"}},{"name":"timestamp","description":"The timestamp of the embed.","nullable":true,"type":[[["number"]]],"meta":{"line":32,"file":"Embed.js","path":"src/messageComponents"}},{"name":"colour","description":"The colour of the embed.","nullable":true,"type":[[["object"]]],"meta":{"line":37,"file":"Embed.js","path":"src/messageComponents"}},{"name":"footer","description":"The footer of the embed.","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"Embed.js","path":"src/messageComponents"}},{"name":"image","description":"The image url of the embed.","nullable":true,"type":[[["string"]]],"meta":{"line":47,"file":"Embed.js","path":"src/messageComponents"}},{"name":"thumbnail","description":"The thumbnail url of the embed.","nullable":true,"type":[[["string"]]],"meta":{"line":52,"file":"Embed.js","path":"src/messageComponents"}},{"name":"author","description":"The author data of the embed.","nullable":true,"type":[[["object"]]],"meta":{"line":57,"file":"Embed.js","path":"src/messageComponents"}},{"name":"fields","description":"The title of the embed.","type":[[["Array","<"],["Object",">"]]],"meta":{"line":62,"file":"Embed.js","path":"src/messageComponents"}}],"methods":[{"name":"setTitle","description":"Set the title of the embed.","params":[{"name":"title","description":"The new title","type":[[["string"]]]}],"returns":{"types":[[["this"]]],"description":"The new embed."},"meta":{"line":70,"file":"Embed.js","path":"src/messageComponents"}},{"name":"setDescription","description":"Set the description of the embed.","params":[{"name":"description","description":"The new description","type":[[["string"]]]}],"returns":{"types":[[["this"]]],"description":"The new embed."},"meta":{"line":81,"file":"Embed.js","path":"src/messageComponents"}},{"name":"setUrl","description":"Set the url of the embed.","params":[{"name":"url","description":"The new url","type":[[["string"]]]}],"returns":{"types":[[["this"]]],"description":"The new embed."},"meta":{"line":92,"file":"Embed.js","path":"src/messageComponents"}},{"name":"setImage","description":"Set the image of the embed.","params":[{"name":"url","description":"The new image url.","type":[[["string"]]]}],"returns":{"types":[[["this"]]],"description":"The new embed."},"meta":{"line":103,"file":"Embed.js","path":"src/messageComponents"}},{"name":"setTimestamp","description":"Set the timestamp of the embed.","params":[{"name":"time","description":"The new timestamp.","type":[[["string"]]]}],"returns":{"types":[[["this"]]],"description":"The new embed."},"meta":{"line":114,"file":"Embed.js","path":"src/messageComponents"}},{"name":"setThumbnail","description":"Set the thumbnail of the embed.","params":[{"name":"url","description":"The new thumbnail url.","type":[[["string"]]]}],"returns":{"types":[[["this"]]],"description":"The new embed."},"meta":{"line":126,"file":"Embed.js","path":"src/messageComponents"}},{"name":"setFooter","description":"Set the footer of the embed.","params":[{"name":"text","description":"The new footer text.","type":[[["string"]]]},{"name":"icon","description":"The new footer icon.","type":[[["string"]]]}],"returns":{"types":[[["this"]]],"description":"The new embed."},"meta":{"line":138,"file":"Embed.js","path":"src/messageComponents"}},{"name":"addField","description":"Add a field to the embed.","params":[{"name":"name","description":"The new field name.","type":[[["string"]]]},{"name":"value","description":"The new field value.","type":[[["string"]]]},{"name":"inline","description":"Weather the field should be inline or not..","type":[[["boolean"]]]}],"returns":{"types":[[["this"]]],"description":"The new embed."},"meta":{"line":155,"file":"Embed.js","path":"src/messageComponents"}},{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":172,"file":"Embed.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a JSON string like Guilded likes.","returns":[[["object"]]],"meta":{"line":180,"file":"Embed.js","path":"src/messageComponents"}}],"meta":{"line":5,"file":"Embed.js","path":"src/messageComponents"}},{"name":"EmojiText","extends":[[["ParagraphComponent"]]],"construct":{"name":"EmojiText","description":"Represents the a emoji in a message."},"methods":[{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":22,"file":"EmojiText.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":31,"file":"EmojiText.js","path":"src/messageComponents"}}],"meta":{"line":8,"file":"EmojiText.js","path":"src/messageComponents"}},{"name":"GuildedImage","extends":[[["BaseComponent"]]],"construct":{"name":"GuildedImage","description":"Represents an image in a message.","params":[{"name":"src","description":"The source of the image.","type":[[["string"]]]}]},"props":[{"name":"src","description":"The source of the image.","type":[[["string"]]],"meta":{"line":16,"file":"GuildedImage.js","path":"src/messageComponents"}}],"methods":[{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":24,"file":"GuildedImage.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":33,"file":"GuildedImage.js","path":"src/messageComponents"}}],"meta":{"line":10,"file":"GuildedImage.js","path":"src/messageComponents"}},{"name":"GuildedVideo","extends":[[["BaseComponent"]]],"construct":{"name":"GuildedVideo","description":"Represents a video in a message.","params":[{"name":"src","description":"The source of the video.","type":[[["string"]]]}]},"methods":[{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":19,"file":"GuildedVideo.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":28,"file":"GuildedVideo.js","path":"src/messageComponents"}}],"meta":{"line":9,"file":"GuildedVideo.js","path":"src/messageComponents"}},{"name":"Link","extends":[[["ParagraphComponent"]]],"construct":{"name":"Link","description":"Represents the a hyperlink in a message.","params":[{"name":"url","description":"The url of the link.","type":[[["String"]]]},{"name":"content","description":"The content of the link.","type":[[["String"]]]}]},"methods":[{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":24,"file":"Link.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":35,"file":"Link.js","path":"src/messageComponents"}}],"meta":{"line":5,"file":"Link.js","path":"src/messageComponents"}},{"name":"Markdown","extends":[[["BaseComponent"]]],"construct":{"name":"Markdown","description":"Represents markdown text in a message.","params":[{"name":"content","description":"The content.","type":[[["string"]]]}]},"methods":[{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":22,"file":"Markdown.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":31,"file":"Markdown.js","path":"src/messageComponents"}}],"meta":{"line":5,"file":"Markdown.js","path":"src/messageComponents"}},{"name":"MessageBuilder","construct":{"name":"MessageBuilder","description":"Used to build messages.","params":[{"name":"components","description":"The components to initialize with.","variable":true,"type":[[["BaseComponent"]],[["ParagraphComponent"]],[["string"]]]}]},"props":[{"name":"content","description":"The contents of the message.","type":[[["Array","<("],["BaseComponent","|"],["ParagraphComponent",")>"]]],"meta":{"line":18,"file":"MessageBuilder.js","path":"src/messageComponents"}}],"methods":[{"name":"add","description":"Add a component to the message.","params":[{"name":"component","description":"The component to add.","type":[[["BaseComponent"]],[["ParagraphComponent"]],[["string"]]]}],"returns":[[["this"]]],"meta":{"line":28,"file":"MessageBuilder.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":48,"file":"MessageBuilder.js","path":"src/messageComponents"}},{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":64,"file":"MessageBuilder.js","path":"src/messageComponents"}}],"meta":{"line":8,"file":"MessageBuilder.js","path":"src/messageComponents"}},{"name":"Paragraph","extends":[[["BaseComponent"]]],"construct":{"name":"Paragraph","description":"Represents a paragraph in a message.","params":[{"name":"data","description":"The content of the paragraph. Its an object only if the raw option is included.","type":[[["ParagraphComponent"]],[["Array","<"],["ParagraphComponent",">"]],[["string"]],[["Array","<"],["string",">"]],[["object"]]]},{"name":"options","description":"The options of the paragraph.","optional":true,"type":[[["object"]]]},{"name":"raw","description":"Whether or not the data is the raw api data.","optional":true,"default":false,"type":[[["bool"]]]}]},"methods":[{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":78,"file":"Paragraph.js","path":"src/messageComponents"}},{"name":"add","description":"Add a component to the paragraph.","params":[{"name":"component","description":"The component to add.","type":[[["ParagraphComponent"]],[["string"]]]}],"returns":[[["this"]]],"meta":{"line":87,"file":"Paragraph.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":103,"file":"Paragraph.js","path":"src/messageComponents"}}],"meta":{"line":11,"file":"Paragraph.js","path":"src/messageComponents"}},{"name":"ParagraphComponent","description":"Represents a component in a paragraph.","access":"private","meta":{"line":6,"file":"ParagraphComponent.js","path":"src/messageComponents"}},{"name":"RawComponent","extends":[[["BaseComponent"]]],"construct":{"name":"RawComponent","description":"Represents an unknown component in a message.","params":[{"name":"content","description":"The content.","type":[["*"]]}]},"props":[{"name":"content","description":"The content of the component.","type":[[["string"]]],"meta":{"line":15,"file":"RawComponent.js","path":"src/messageComponents"}}],"methods":[{"name":"toString","description":"Converts the message into a string-like format.","access":"private","returns":[[["string"]]],"meta":{"line":23,"file":"RawComponent.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":32,"file":"RawComponent.js","path":"src/messageComponents"}}],"meta":{"line":9,"file":"RawComponent.js","path":"src/messageComponents"}},{"name":"Text","see":["{@link Markdown} for simpler formatting."],"extends":[[["ParagraphComponent"]]],"construct":{"name":"Text","description":"Represents text in a message.","params":[{"name":"text","description":"The url of the link.","type":[[["String"]]]},{"name":"content","description":"The content of the link.","optional":true,"type":[[["Array","<('"],["bold","'|'"],["spoiler","'|'"],["strikethrough","'|'"],["italic","'|'"],["underline","'|'"],["inline","-"],["code","-"],["v2","')>"]]]}]},"methods":[{"name":"toString","description":"Convert to a string.","returns":[[["string"]]],"meta":{"line":25,"file":"Text.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":52,"file":"Text.js","path":"src/messageComponents"}}],"meta":{"line":5,"file":"Text.js","path":"src/messageComponents"}},{"name":"UserMention","methods":[{"name":"toString","description":"Returns as a string.","returns":[[["string"]]],"meta":{"line":18,"file":"UserMention.js","path":"src/messageComponents"}},{"name":"toJSON","description":"Convert to a  JSON string like Guilded likes.","access":"private","returns":[[["object"]]],"meta":{"line":27,"file":"UserMention.js","path":"src/messageComponents"}}],"meta":{"line":5,"file":"UserMention.js","path":"src/messageComponents"}},{"name":"BaseChannel","access":"private","methods":[{"name":"apply","access":"private","params":[{"name":"data","type":[["*"]]}],"async":true,"meta":{"line":15,"file":"BaseChannel.js","path":"src/structures"}}],"meta":{"line":4,"file":"BaseChannel.js","path":"src/structures"}},{"name":"Client","description":"The main class to interact with the api.","construct":{"name":"Client","description":"Make a new client for interacting with the api.","params":[{"name":"options","description":"The client options. None right now.","optional":true,"type":[[["Object"]]]}]},"props":[{"name":"channels","description":"The channels the bot can access.","type":[[["ChannelManager"]]],"meta":{"line":47,"file":"Client.js","path":"src/structures"}},{"name":"users","description":"The users the bot can access.","type":[[["UserManager"]]],"meta":{"line":52,"file":"Client.js","path":"src/structures"}},{"name":"teams","description":"The teams the bot can access.","type":[[["TeamManager"]]],"meta":{"line":57,"file":"Client.js","path":"src/structures"}}],"methods":[{"name":"login","description":"Login to a user.","params":[{"name":"email","description":"The email of the user you want to login as.","type":[[["string"]]]},{"name":"password","description":"The password of the user you want to login as.","type":[[["string"]]]}],"async":true,"meta":{"line":74,"file":"Client.js","path":"src/structures"}},{"name":"destroy","description":"Disconnect and stop requests from the client.","async":true,"meta":{"line":89,"file":"Client.js","path":"src/structures"}},{"name":"raw","description":"Internal function to process raw events.","access":"private","params":[{"name":"msg","description":"The data to process.","type":[["*"]]}],"async":true,"meta":{"line":107,"file":"Client.js","path":"src/structures"}},{"name":"connected","description":"Internal function to handle first connecting.","access":"private","async":true,"meta":{"line":182,"file":"Client.js","path":"src/structures"}},{"name":"wsFail","description":"Internal function to handle websocket fails.","access":"private","meta":{"line":209,"file":"Client.js","path":"src/structures"}},{"name":"request","description":"Make a request to the api.","access":"private","examples":["// get request\nclient.request({path: 'path/to/request', method: 'get'})\n\n// post request\nclient.request({path: 'path/to/request', data: 'data to post'})"],"params":[{"name":"options","description":"The options for the request.","type":[[["Object"]]]},{"name":"options.path","description":"The path to go request.","type":[[["string"]]]},{"name":"options.data","description":"The data to send.","type":[["*"]]},{"name":"options.method","description":"The method.","optional":true,"default":"'post'","type":[[["string"]]]},{"name":"options.json","description":"If you want to receive a JSON response.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.hardError","description":"Whether or not to throw an error if the request fails.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Promise","<"],["object",">"]]],"description":"The response from the server."},"meta":{"line":230,"file":"Client.js","path":"src/structures"}}],"events":[{"name":"message","description":"Fires when a new message is created","params":[{"name":"message","description":"The message that was created","type":[[["Message"]]]}],"meta":{"line":116,"file":"Client.js","path":"src/structures"}},{"name":"messageDelete","description":"Fires when an existing message is deleted","params":[{"name":"message","description":"The message that was deleted","type":[[["Message"]]]}],"meta":{"line":130,"file":"Client.js","path":"src/structures"}},{"name":"typingStart","description":"Fires when someone starts typing","params":[{"name":"data","description":"The data from the api","type":[["*"]]}],"meta":{"line":141,"file":"Client.js","path":"src/structures"}},{"name":"typingEnd","description":"Fires when someone stops typing","params":[{"name":"data","description":"The data from the api","type":[["*"]]}],"meta":{"line":151,"file":"Client.js","path":"src/structures"}},{"name":"theadCreated","description":"Fires when an thread is created","params":[{"name":"channel","description":"The thread that was created","type":[[["Channel"]]]}],"meta":{"line":165,"file":"Client.js","path":"src/structures"}},{"name":"ready","description":"Fires when the client is ready","meta":{"line":198,"file":"Client.js","path":"src/structures"}}],"meta":{"line":26,"file":"Client.js","path":"src/structures"}},{"name":"ClientUser","description":"Represents the client user.","extends":[[["User"]]],"props":[{"name":"id","description":"The id of the user","type":[[["string"]]],"meta":{"line":16,"file":"User.js","path":"src/structures"}},{"name":"name","description":"the name of the user","type":[[["string"]]],"meta":{"line":21,"file":"User.js","path":"src/structures"}},{"name":"subdomain","description":"The user's profile URL","nullable":true,"type":[[["string"]]],"meta":{"line":26,"file":"User.js","path":"src/structures"}},{"name":"joinTime","description":"The time the user joined Guilded.","type":[[["Date"]]],"meta":{"line":31,"file":"User.js","path":"src/structures"}},{"name":"joinTimestamp","description":"The timestamp the user joined Guilded.","type":[[["string"]]],"meta":{"line":36,"file":"User.js","path":"src/structures"}},{"name":"status","description":"User status object","see":["https://guildedapi.com/resources/user/#user-status-object"],"type":[[["object"]]],"meta":{"line":42,"file":"User.js","path":"src/structures"}},{"name":"about","description":"The users bio and tagline","type":[[["object"]]],"meta":{"line":47,"file":"User.js","path":"src/structures"}},{"name":"lastOnline","description":"The date the user was last online.","type":[[["Date"]]],"meta":{"line":52,"file":"User.js","path":"src/structures"}},{"name":"lastOnlineTimestamp","description":"The timestamp the user was last online.","type":[[["number"]]],"meta":{"line":57,"file":"User.js","path":"src/structures"}},{"name":"avatarURL","description":"The url of the user's avatar","type":[[["string"]]],"meta":{"line":62,"file":"User.js","path":"src/structures"}},{"name":"lastUpdated","description":"The timestamp the user's info was last updated","type":[[["string"]]],"meta":{"line":67,"file":"User.js","path":"src/structures"}}],"methods":[{"name":"setPresence","description":"Set the presence of the current user.","params":[{"name":"type","description":"Required. The type of status.","type":[[["online","'"]],[["idle","'"]],[["dnd","'"]],[["invisible","'"]]]}],"async":true,"meta":{"line":16,"file":"ClientUser.js","path":"src/structures"}},{"name":"update","description":"Updates the user's info.","inherits":"User#update","inherited":true,"async":true,"returns":[[["Promise","<"],["this",">"]]],"meta":{"line":74,"file":"User.js","path":"src/structures"}}],"meta":{"line":7,"file":"ClientUser.js","path":"src/structures"}},{"name":"Message","construct":{"name":"Message","description":"Represents a message."},"props":[{"name":"ready","access":"private","type":[[["Promise"]]],"meta":{"line":24,"file":"Message.js","path":"src/structures"}},{"name":"author","description":"The user who sent the message","type":[[["User"]]],"meta":{"line":32,"file":"Message.js","path":"src/structures"}},{"name":"channel","description":"The channel the message was in.","type":[[["TextBasedChannel"]],[["ThreadChannel"]],[["TextChannel"]],[["UnknownChannel"]]],"meta":{"line":38,"file":"Message.js","path":"src/structures"}},{"name":"team","description":"The team the message was in.","nullable":true,"type":[[["Team"]]],"meta":{"line":54,"file":"Message.js","path":"src/structures"}},{"name":"id","description":"The id of the channel","type":[[["string"]]],"meta":{"line":59,"file":"Message.js","path":"src/structures"}},{"name":"content","description":"The content of the message. Keep in mind this is a MessageBuilder. If you want it as a string run .toString() on it.","see":["{@link MessageBuilder}"],"type":[[["MessageBuilder"]]],"meta":{"line":65,"file":"Message.js","path":"src/structures"}},{"name":"rawContent","description":"The raw content as a string","type":[["*"]],"meta":{"line":70,"file":"Message.js","path":"src/structures"}},{"name":"createdAt","description":"The date it was created at.","type":[[["Date"]]],"meta":{"line":75,"file":"Message.js","path":"src/structures"}},{"name":"createdAtTimestamp","description":"The timestamp it was created at.","type":[[["number"]]],"meta":{"line":80,"file":"Message.js","path":"src/structures"}}],"meta":{"line":9,"file":"Message.js","path":"src/structures"}},{"name":"Role","meta":{"line":3,"file":"Role.js","path":"src/structures"}},{"name":"Team","props":[{"name":"id","description":"The id of the team.","type":[[["number"]]],"meta":{"line":18,"file":"Team.js","path":"src/structures"}},{"name":"name","description":"The name of the team.","type":[[["string"]]],"meta":{"line":23,"file":"Team.js","path":"src/structures"}},{"name":"subdomain","description":"The custom url of the team.","type":[[["string"]]],"meta":{"line":28,"file":"Team.js","path":"src/structures"}},{"name":"bio","description":"The team bio","nullable":true,"type":[[["string"]]],"meta":{"line":33,"file":"Team.js","path":"src/structures"}},{"name":"timezone","description":"The timezone of the team.","nullable":true,"type":[[["string"]]],"meta":{"line":38,"file":"Team.js","path":"src/structures"}},{"name":"type","description":"The type of the team.","nullable":true,"type":[[["string"]]],"meta":{"line":43,"file":"Team.js","path":"src/structures"}},{"name":"roles","description":"The roles in the team.","type":[[["Array","<"],["Role",">"]]],"meta":{"line":48,"file":"Team.js","path":"src/structures"}},{"name":"createdAt","description":"The time the team was created.","type":[[["Date"]]],"meta":{"line":53,"file":"Team.js","path":"src/structures"}},{"name":"createdAtTimestamp","description":"The timestamp the team was created at.","type":[[["number"]]],"meta":{"line":58,"file":"Team.js","path":"src/structures"}},{"name":"ownerId","description":"The id of the owner of the team.","type":[[["string"]]],"meta":{"line":63,"file":"Team.js","path":"src/structures"}},{"name":"owner","description":"The owner of the team.","nullable":true,"type":[[["User"]]],"meta":{"line":68,"file":"Team.js","path":"src/structures"}},{"name":"measurements","description":"Various stats for the team","type":[[["Object"]]],"meta":{"line":73,"file":"Team.js","path":"src/structures"}},{"name":"memberCount","description":"The member count of the team","nullable":true,"type":[[["number"]]],"meta":{"line":78,"file":"Team.js","path":"src/structures"}},{"name":"iconURL","description":"The icon URL of the team","type":[[["string"]]],"meta":{"line":83,"file":"Team.js","path":"src/structures"}},{"name":"isVerified","description":"Wether or not the team is verified","type":[[["bool"]]],"meta":{"line":88,"file":"Team.js","path":"src/structures"}},{"name":"isPublic","description":"Wether or not the team is public","type":[[["bool"]]],"meta":{"line":93,"file":"Team.js","path":"src/structures"}}],"meta":{"line":6,"file":"Team.js","path":"src/structures"}},{"name":"TextBasedChannel","description":"Represents a Text based channel.","extends":[[["BaseChannel"]]],"props":[{"name":"id","description":"The id of the channel.","type":[[["string"]]],"meta":{"line":24,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"createdBy","description":"The id of the user who created the channel.","type":[[["String"]]],"meta":{"line":29,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created.","type":[[["Date"]]],"meta":{"line":34,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"createdAtTimestamp","description":"The timestamp the channel was created.","type":[[["number"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"description","description":"The description of the channel.","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"group","description":"The id of the group the channel is in.","type":[[["string"]]],"meta":{"line":49,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"public","description":"Wether or not the channel is public.","type":[[["boolean"]]],"meta":{"line":54,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the channel.","type":[[["string"]]],"meta":{"line":59,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"team","description":"The team this channel is attached to.","nullable":true,"type":[[["Team"]]],"meta":{"line":64,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"updatedAt","description":"The time the channel was last updated at.","type":[[["Date"]]],"meta":{"line":69,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"updatedAtTimestamp","description":"The timestamp of the last time the channel was updated.","type":[[["number"]]],"meta":{"line":74,"file":"TextBasedChannel.js","path":"src/structures"}}],"methods":[{"name":"send","description":"Send a message to the channel.","params":[{"name":"data","description":"The content to send to the channel.","type":[[["BaseComponent"]],[["ParagraphComponent"]],[["string"]],[["MessageBuilder"]]]},{"name":"options","description":"The options to send. Currently none.","type":[[["object"]]]}],"async":true,"meta":{"line":81,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"apply","access":"private","inherits":"BaseChannel#apply","inherited":true,"params":[{"name":"data","type":[["*"]]}],"async":true,"meta":{"line":15,"file":"BaseChannel.js","path":"src/structures"}}],"meta":{"line":11,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"TextChannel","description":"Represents a plain old text channel.","extends":[[["TextBasedChannel"]]],"props":[{"name":"id","description":"The id of the channel.","type":[[["string"]]],"meta":{"line":24,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"createdBy","description":"The id of the user who created the channel.","type":[[["String"]]],"meta":{"line":29,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created.","type":[[["Date"]]],"meta":{"line":34,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"createdAtTimestamp","description":"The timestamp the channel was created.","type":[[["number"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"description","description":"The description of the channel.","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"group","description":"The id of the group the channel is in.","type":[[["string"]]],"meta":{"line":49,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"public","description":"Wether or not the channel is public.","type":[[["boolean"]]],"meta":{"line":54,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the channel.","type":[[["string"]]],"meta":{"line":59,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"team","description":"The team this channel is attached to.","nullable":true,"type":[[["Team"]]],"meta":{"line":64,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"updatedAt","description":"The time the channel was last updated at.","type":[[["Date"]]],"meta":{"line":69,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"updatedAtTimestamp","description":"The timestamp of the last time the channel was updated.","type":[[["number"]]],"meta":{"line":74,"file":"TextBasedChannel.js","path":"src/structures"}}],"methods":[{"name":"send","description":"Send a message to the channel.","inherits":"TextBasedChannel#send","inherited":true,"params":[{"name":"data","description":"The content to send to the channel.","type":[[["BaseComponent"]],[["ParagraphComponent"]],[["string"]],[["MessageBuilder"]]]},{"name":"options","description":"The options to send. Currently none.","type":[[["object"]]]}],"async":true,"meta":{"line":81,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"apply","access":"private","inherits":"BaseChannel#apply","inherited":true,"params":[{"name":"data","type":[["*"]]}],"async":true,"meta":{"line":15,"file":"BaseChannel.js","path":"src/structures"}}],"meta":{"line":6,"file":"TextChannel.js","path":"src/structures"}},{"name":"ThreadChannel","description":"Represents a thread.","extends":[[["TextBasedChannel"]]],"props":[{"name":"id","description":"The id of the channel.","type":[[["string"]]],"meta":{"line":24,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"createdBy","description":"The id of the user who created the channel.","type":[[["String"]]],"meta":{"line":29,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created.","type":[[["Date"]]],"meta":{"line":34,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"createdAtTimestamp","description":"The timestamp the channel was created.","type":[[["number"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"description","description":"The description of the channel.","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"group","description":"The id of the group the channel is in.","type":[[["string"]]],"meta":{"line":49,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"public","description":"Wether or not the channel is public.","type":[[["boolean"]]],"meta":{"line":54,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the channel.","type":[[["string"]]],"meta":{"line":59,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"team","description":"The team this channel is attached to.","nullable":true,"type":[[["Team"]]],"meta":{"line":64,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"updatedAt","description":"The time the channel was last updated at.","type":[[["Date"]]],"meta":{"line":69,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"updatedAtTimestamp","description":"The timestamp of the last time the channel was updated.","type":[[["number"]]],"meta":{"line":74,"file":"TextBasedChannel.js","path":"src/structures"}}],"methods":[{"name":"send","description":"Send a message to the channel.","inherits":"TextBasedChannel#send","inherited":true,"params":[{"name":"data","description":"The content to send to the channel.","type":[[["BaseComponent"]],[["ParagraphComponent"]],[["string"]],[["MessageBuilder"]]]},{"name":"options","description":"The options to send. Currently none.","type":[[["object"]]]}],"async":true,"meta":{"line":81,"file":"TextBasedChannel.js","path":"src/structures"}},{"name":"apply","access":"private","inherits":"BaseChannel#apply","inherited":true,"params":[{"name":"data","type":[["*"]]}],"async":true,"meta":{"line":15,"file":"BaseChannel.js","path":"src/structures"}}],"meta":{"line":6,"file":"ThreadChannel.js","path":"src/structures"}},{"name":"TypingEvent","description":"Typing info.","meta":{"line":6,"file":"TypingEvent.js","path":"src/structures"}},{"name":"UnknownChannel","description":"A dummy channel with a few methods for rare situations where I don't get data.\nThis is to fix an issue and will be removed in the future.","methods":[{"name":"send","description":"Send a message to the channel.","params":[{"name":"data","description":"The content to send to the channel.","type":[[["BaseComponent"]],[["ParagraphComponent"]],[["string"]],[["MessageBuilder"]]]},{"name":"options","description":"The options to send. Currently none.","type":[[["object"]]]}],"async":true,"meta":{"line":20,"file":"UnkownChannel.js","path":"src/structures"}}],"meta":{"line":10,"file":"UnkownChannel.js","path":"src/structures"}},{"name":"User","description":"Represents a user on guilded.","props":[{"name":"id","description":"The id of the user","type":[[["string"]]],"meta":{"line":16,"file":"User.js","path":"src/structures"}},{"name":"name","description":"the name of the user","type":[[["string"]]],"meta":{"line":21,"file":"User.js","path":"src/structures"}},{"name":"subdomain","description":"The user's profile URL","nullable":true,"type":[[["string"]]],"meta":{"line":26,"file":"User.js","path":"src/structures"}},{"name":"joinTime","description":"The time the user joined Guilded.","type":[[["Date"]]],"meta":{"line":31,"file":"User.js","path":"src/structures"}},{"name":"joinTimestamp","description":"The timestamp the user joined Guilded.","type":[[["string"]]],"meta":{"line":36,"file":"User.js","path":"src/structures"}},{"name":"status","description":"User status object","see":["https://guildedapi.com/resources/user/#user-status-object"],"type":[[["object"]]],"meta":{"line":42,"file":"User.js","path":"src/structures"}},{"name":"about","description":"The users bio and tagline","type":[[["object"]]],"meta":{"line":47,"file":"User.js","path":"src/structures"}},{"name":"lastOnline","description":"The date the user was last online.","type":[[["Date"]]],"meta":{"line":52,"file":"User.js","path":"src/structures"}},{"name":"lastOnlineTimestamp","description":"The timestamp the user was last online.","type":[[["number"]]],"meta":{"line":57,"file":"User.js","path":"src/structures"}},{"name":"avatarURL","description":"The url of the user's avatar","type":[[["string"]]],"meta":{"line":62,"file":"User.js","path":"src/structures"}},{"name":"lastUpdated","description":"The timestamp the user's info was last updated","type":[[["string"]]],"meta":{"line":67,"file":"User.js","path":"src/structures"}}],"methods":[{"name":"update","description":"Updates the user's info.","async":true,"returns":[[["Promise","<"],["this",">"]]],"meta":{"line":74,"file":"User.js","path":"src/structures"}}],"meta":{"line":4,"file":"User.js","path":"src/structures"}}],"interfaces":[],"typedefs":[],"externals":[{"name":"Collection","see":["{@link https://discord.js.org/#/docs/collection/master/class/Collection}"],"meta":{"line":1,"file":"BaseManager.js","path":"src/managers"}}]}